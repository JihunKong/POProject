// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role           @default(STUDENT)
  studentId     String?        @unique
  classRoom     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  conversations Conversation[]
  analytics     Analytics[]
  teams         TeamMember[]
  accounts      Account[]
  sessions      Session[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  slogan      String?
  description String?
  projectGoal String?
  inviteCode  String       @unique @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  members     TeamMember[]
  progress    Progress[]
  tasks       Task[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member") // leader, member
  subjects  String[] // 융합 과목
  joinedAt  DateTime @default(now())
  
  // Relations
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("AssignedTasks")
  
  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Progress {
  id               String   @id @default(cuid())
  teamId           String
  phase            String
  completionRate   Int      @default(0)
  lastActivity     DateTime @default(now())
  milestones       Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  team             Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@index([teamId])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  eventData Json
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

model Task {
  id          String       @id @default(cuid())
  teamId      String
  title       String
  description String?
  phase       String       // Day1, Day2, Day3, Day4, Day5
  category    String       // 문제발견, 분석, 해결책, 발표준비 등
  dueDate     DateTime?
  status      TaskStatus   @default(PENDING)
  assignedTo  String[]     // TeamMember IDs
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignees   TeamMember[] @relation("AssignedTasks")
  
  @@index([teamId])
  @@index([status])
  @@index([phase])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}